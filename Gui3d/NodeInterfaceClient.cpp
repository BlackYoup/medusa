/*
	NodeInterfaceClient.cpp

	This base class is used to receive messages generated by NodeMessageServer,
	NodeInterfaceClient is one class dervied from this class

	(c)2005 Palestar, Richard Lyle
*/

#define GUI3D_DLL
#include "Debug/Assert.h"
#include "System/Messages.h"
#include "Standard/StringHash.h"
#include "Standard/Queue.h"

#include "NodeInterfaceClient.h"
#include "InterfaceContext.h"

//----------------------------------------------------------------------------

IMPLEMENT_FACTORY( NodeInterfaceClient, BaseNode );
REGISTER_FACTORY_KEY(  NodeInterfaceClient, 3979175815367415218 );

BEGIN_PROPERTY_LIST( NodeInterfaceClient, BaseNode );
END_PROPERTY_LIST();

NodeInterfaceClient::NodeInterfaceClient() : m_pContext( NULL )
{}

//----------------------------------------------------------------------------

void NodeInterfaceClient::onAttach( BaseNode * pChild )
{
	BaseNode::onAttach( pChild );

	// is this node currently attached to a InterfaceContext object
	if ( m_pContext != NULL && WidgetCast<NodeInterfaceClient>( pChild ) )
	{
		// set the node interface context
		((NodeInterfaceClient *)pChild)->setContext( m_pContext );
		// invalidate the message queue
		m_pContext->setMessageQueueInvalid();
	}
}

void NodeInterfaceClient::onDetach( BaseNode * pChild )
{
	BaseNode::onDetach( pChild );

	// invalidate the message queue when a child is detached from the interface context
	if ( m_pContext != NULL && WidgetCast<NodeInterfaceClient>( pChild ) )
		m_pContext->setMessageQueueInvalid();
}

//----------------------------------------------------------------------------

Document * NodeInterfaceClient::document() const
{
	if ( m_pContext )
		return( m_pContext->document() );
	return NULL;
}

bool NodeInterfaceClient::enabled() const
{
	return true;
}

void NodeInterfaceClient::onActivate()
{}

void NodeInterfaceClient::onDeactivate()
{}


bool NodeInterfaceClient::onMessage( const Message & msg )
{
	return false;
}

void NodeInterfaceClient::onUpdate( float deltaTime )
{}

//---------------------------------------------------------------------------------------------------

bool NodeInterfaceClient::postMessage( dword message, dword wparam, dword lparam )
{
	if ( m_pContext != NULL )
	{
		Message msg;
		msg.message = message;
		msg.wparam = wparam;
		msg.lparam = lparam;
		msg.origin = StringHash( name() );

		return m_pContext->onMessage( msg );
	}

	return false;
}

//----------------------------------------------------------------------------
// EOF
		

