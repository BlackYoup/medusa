/*
	NodeInterfaceClient.h

	This base class is used to receive messages generated by InterfaceContext
	(c)2005 Palestar, Richard Lyle
*/

#ifndef NODE_MESSAGE_CLIENT_H
#define NODE_MESSAGE_CLIENT_H

#include "System/CommandTarget.h"
#include "Render3D/BaseNode.h"
#include "Standard/StringHash.h"

#include "Messages.h"
#include "Document.h"
#include "GUI3DDll.h"

//----------------------------------------------------------------------------

class InterfaceContext;	// forward declare

class DLL NodeInterfaceClient : public BaseNode
{
public:
	DECLARE_WIDGET_CLASS();
	DECLARE_PROPERTY_LIST();

	// Types
	typedef Reference<NodeInterfaceClient>	Ref;
	typedef CommandTarget::Message			Message;

	// Construction
	NodeInterfaceClient();
	// BaseNode interface
	void				onAttach( BaseNode * pChild );
	void				onDetach( BaseNode * pChild );
	// Accessors
	InterfaceContext *	context() const;
	Document *			document() const;
	// Mutators
	void				setContext( InterfaceContext * pContext );

	// Client interface
	virtual bool		enabled() const;								// can node and children receive messages

	virtual void		onActivate();									
	virtual void		onDeactivate();							
	virtual bool		onMessage( const Message & msg );				// receive message
	virtual void		onUpdate( float deltaTime );					// called after each render
	
	// Helpers
	bool				postMessage( dword message, 
							dword wparam, dword lparam );				// this posts a message to the InterfaceContext
private:
	// Data
	InterfaceContext *	m_pContext;
};

//----------------------------------------------------------------------------

inline InterfaceContext * NodeInterfaceClient::context() const
{
	return( m_pContext );
}

//----------------------------------------------------------------------------

inline void NodeInterfaceClient::setContext( InterfaceContext * pContext )
{
	m_pContext = pContext;
}

//----------------------------------------------------------------------------

#endif

//----------------------------------------------------------------------------
// EOF
